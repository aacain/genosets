/*
 * 
 * 
 */
package edu.uncc.genosets.datanavigator;

import edu.uncc.genosets.datamanager.api.DataManager;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.logging.Logger;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.actions.DeleteAction;
import org.openide.actions.RenameAction;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Lookup;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//edu.uncc.genosets.datanavigator//Navigator//EN",
        autostore = false)
@TopComponent.Description(preferredID = "NavigatorTopComponent",
        iconBase = "edu/uncc/genosets/datanavigator/resources/bacteria-icon.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true, position = 1)
@ActionID(category = "Window", id = "edu.uncc.genosets.datanavigator.NavigatorTopComponent")
@ActionReference(path = "Menu/Window",
        position = 10)
@TopComponent.OpenActionRegistration(displayName = "#CTL_NavigatorTopComponent",
        preferredID = "NavigatorTopComponent")
@NbBundle.Messages({
    "CTL_NavigatorTopComponent=Projects",
    "HINT_NavigatorTopComponent=This is the Projects Navigator Window"
})
public final class NavigatorTopComponent extends TopComponent implements ExplorerManager.Provider, PropertyChangeListener {

    private static NavigatorTopComponent instance;
    /**
     * path to the icon used by the component and its open action
     */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "NavigatorTopComponent";
    private ExplorerManager em;
    private Lookup lookup;
    private DataManager dbMgr;

    public NavigatorTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(NavigatorTopComponent.class, "CTL_NavigatorTopComponent"));
        setToolTipText(NbBundle.getMessage(NavigatorTopComponent.class, "HINT_NavigatorTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

        this.em = new ExplorerManager();
        
        getActionMap().put("rename", RenameAction.get(RenameAction.class));
        getActionMap().put("delete", ExplorerUtils.actionDelete(this.em, true));
        this.lookup = ExplorerUtils.createLookup(this.em, getActionMap());
        this.associateLookup(this.lookup);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new BeanTreeView();
        jToolBar1 = new javax.swing.JToolBar();
        expandButton = new javax.swing.JButton();
        collapseButton = new javax.swing.JButton();

        ((BeanTreeView)jScrollPane1).setRootVisible(false);

        jToolBar1.setRollover(true);

        expandButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/uncc/genosets/datanavigator/resources/addition.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(expandButton, org.openide.util.NbBundle.getMessage(NavigatorTopComponent.class, "NavigatorTopComponent.expandButton.text")); // NOI18N
        expandButton.setFocusable(false);
        expandButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        expandButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        expandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expandButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(expandButton);

        collapseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/uncc/genosets/datanavigator/resources/subtraction.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(collapseButton, org.openide.util.NbBundle.getMessage(NavigatorTopComponent.class, "NavigatorTopComponent.collapseButton.text")); // NOI18N
        collapseButton.setFocusable(false);
        collapseButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        collapseButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        collapseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collapseButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(collapseButton);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void expandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expandButtonActionPerformed
        ((BeanTreeView) jScrollPane1).expandAll();
    }//GEN-LAST:event_expandButtonActionPerformed

    private void collapseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collapseButtonActionPerformed
        //((BeanTreeView) jScrollPane1).collapseNode(em.getRootContext());
        Children children = em.getRootContext().getChildren();
        collapse(children);
    }//GEN-LAST:event_collapseButtonActionPerformed

    private void collapse(Children children) {
        for (Node node : children.getNodes()) {
            boolean expanded = ((BeanTreeView) jScrollPane1).isExpanded(node);
            if (expanded) {
                collapse(node.getChildren());
                ((BeanTreeView) jScrollPane1).collapseNode(node);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton collapseButton;
    private javax.swing.JButton expandButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files
     * only, i.e. deserialization routines; otherwise you could get a
     * non-deserialized instance. To obtain the singleton instance, use
     * {@link #findInstance}.
     */
    public static synchronized NavigatorTopComponent getDefault() {
        if (instance == null) {
            instance = new NavigatorTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the NavigatorTopComponent instance. Never call {@link #getDefault}
     * directly!
     */
    public static synchronized NavigatorTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(NavigatorTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof NavigatorTopComponent) {
            return (NavigatorTopComponent) win;
        }
        Logger.getLogger(NavigatorTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        //add change listeners to data manager
        if (dbMgr == null) {
            dbMgr = DataManager.getDefault();
        }
        Node root = new DataNavigatorRootNode();
        root.setDisplayName("root");
        this.em.setRootContext(root);
        dbMgr.addPropertyChangeListener(this);
    }

    @Override
    public void componentClosed() {
        //remove change listeners to data manager
        dbMgr.removePropertyChangeListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return this.em;
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
            Node root = new DataNavigatorRootNode();
            this.em.setRootContext(root);
    }
}
