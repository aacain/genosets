/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.uncc.genosets.datanavigator.download;

import edu.uncc.genosets.datamanager.api.DataManager;
import edu.uncc.genosets.datamanager.api.DownloadSet;
import edu.uncc.genosets.datamanager.api.FactType;
import java.awt.Component;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.ActionMap;
import javax.swing.JComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDisplayer;
import org.openide.WizardDescriptor;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.ActionReferences;
import org.openide.awt.ActionRegistration;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays the download sets.
 */
@ConvertAsProperties(dtd = "-//edu.uncc.genosets.datanavigator.download//Download//EN",
autostore = false)
@TopComponent.Description(preferredID = "DownloadTopComponent",
iconBase = "edu/uncc/genosets/datanavigator/resources/download.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "edu.uncc.genosets.datanavigator.download.DownloadTopComponent")
//@ActionReference(path = "Menu/Window",
//position = 10)
@ActionReferences(value = {
    @ActionReference(path = "Menu/Tools/Old", position = 10)
    //, @ActionReference(path = "Toolbars/Data", position = 200)
})
@TopComponent.OpenActionRegistration(displayName = "#CTL_DownloadTopComponent",
preferredID = "DownloadTopComponent")
@NbBundle.Messages({
    "CTL_DownloadTopComponent=Downloads",
    "HINT_DownloadTopComponent=This is the Downloads Window"
})
public final class DownloadTopComponent extends TopComponent implements ExplorerManager.Provider, PropertyChangeListener {

    private static DownloadTopComponent instance;
    /**
     * path to the icon used by the component and its open action
     */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "DownloadTopComponent";
    private ExplorerManager em;
    private DownloadSetList dsList = null;

    public DownloadTopComponent() {
        this.em = new ExplorerManager();
        ActionMap map = this.getActionMap();
        map.put("delete", ExplorerUtils.actionDelete(em, true));
        Lookup lookup = ExplorerUtils.createLookup(this.em, map);
        this.associateLookup(lookup);
        initComponents();
        setName(Bundle.CTL_DownloadTopComponent());
        setToolTipText(Bundle.HINT_DownloadTopComponent());
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new BeanTreeView();
        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        newSetButton = new javax.swing.JButton();

        ((BeanTreeView)jScrollPane1).expandAll();
        ((BeanTreeView)jScrollPane1).setRootVisible(false);

        jToolBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jToolBar1.setRollover(true);

        newSetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/uncc/genosets/datanavigator/resources/newProject.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(newSetButton, org.openide.util.NbBundle.getMessage(DownloadTopComponent.class, "DownloadTopComponent.newSetButton.text")); // NOI18N
        newSetButton.setToolTipText(org.openide.util.NbBundle.getMessage(DownloadTopComponent.class, "DownloadTopComponent.newSetButton.toolTipText")); // NOI18N
        newSetButton.setFocusable(false);
        newSetButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newSetButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newSetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSetButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(newSetButton);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void newSetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSetButtonActionPerformed
        addNewAction();
    }//GEN-LAST:event_newSetButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton newSetButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files
     * only, i.e. deserialization routines; otherwise you could get a
     * non-deserialized instance. To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized DownloadTopComponent getDefault() {
        if (instance == null) {
            instance = new DownloadTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the DownloadTopComponent instance. Never call {@link #getDefault}
     * directly!
     */
    public static synchronized DownloadTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(DownloadTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof DownloadTopComponent) {
            return (DownloadTopComponent) win;
        }
        Logger.getLogger(DownloadTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        //get current download sets
        DataManager.getDefault().addPropertyChangeListener(this);
        openDownloadSets();
    }

    @Override
    public void componentClosed() {
        //persist current download sets
        persistDownloadSets(DataManager.getDefault().getConnectionId());
        DataManager.getDefault().removePropertyChangeListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        persistDownloadSets(DataManager.getDefault().getConnectionId());
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return this.em;
    }

    private void persistDownloadSets(String databaseName) {
        DownloadSet.saveSets(databaseName, dsList.list());
    }

    private void openDownloadSets() {
        this.dsList = new DownloadSetList(DownloadSet.getSets(DataManager.getDefault().getConnectionId()));
        createNodes();
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (DataManager.PROP_DB_CHANGED.equals(evt.getPropertyName())) {
            persistDownloadSets((String) evt.getOldValue());
            openDownloadSets();
        }
    }

    private void createNodes() {
        //initialize nodes
        AbstractNode root = new AbstractNode(Children.create(new DownloadSetFactory(dsList), true));
        root.setDisplayName("Download Sets");
        root.setIconBaseWithExtension("edu/uncc/genosets/datanavigator/resources/download.png");
        em.setRootContext(root);
        root.getChildren().getNodes(true);
    }

    private void addNewAction() {
        List<WizardDescriptor.Panel<WizardDescriptor>> panels = new ArrayList<WizardDescriptor.Panel<WizardDescriptor>>();
        panels.add(new CreateDownloadSetWizardPanel1());
        String[] steps = new String[panels.size()];
        for (int i = 0; i < panels.size(); i++) {
            Component c = panels.get(i).getComponent();
            // Default step name to component name of panel.
            steps[i] = c.getName();
            if (c instanceof JComponent) { // assume Swing components
                JComponent jc = (JComponent) c;
                jc.putClientProperty(WizardDescriptor.PROP_CONTENT_SELECTED_INDEX, i);
                jc.putClientProperty(WizardDescriptor.PROP_CONTENT_DATA, steps);
                jc.putClientProperty(WizardDescriptor.PROP_AUTO_WIZARD_STYLE, true);
                jc.putClientProperty(WizardDescriptor.PROP_CONTENT_DISPLAYED, true);
                jc.putClientProperty(WizardDescriptor.PROP_CONTENT_NUMBERED, true);
            }
        }
        WizardDescriptor wiz = new WizardDescriptor(new WizardDescriptor.ArrayIterator<WizardDescriptor>(panels));
        // {0} will be replaced by WizardDesriptor.Panel.getComponent().getName()
        wiz.setTitleFormat(new MessageFormat("{0}"));
        wiz.setTitle("Add Download Set");
        if (DialogDisplayer.getDefault().notify(wiz) == WizardDescriptor.FINISH_OPTION) {
            String name = (String) wiz.getProperty(CreateDownloadSetWizardPanel1.PROP_SETNAME);
            FactType factType = (FactType) wiz.getProperty(CreateDownloadSetWizardPanel1.PROP_FACTTYPE);
            String folderLocation = (String) wiz.getProperty(CreateDownloadSetWizardPanel1.PROP_FOLDER);
            try {
                File file = new File(folderLocation);
                boolean exists = file.exists();
                FileObject folder = FileUtil.toFileObject(file);
                if (name != null && factType != null) {
                    //create the dataset folder
                    FileObject fo = folder.createFolder(FileUtil.findFreeFolderName(folder, name));
                    DownloadSet s = new DownloadSet(factType);
                    s.setName(name);
                    s.setRootFileObject(fo);
                    dsList.add(s);
                }
            } catch (IOException ex) {
                Logger.getLogger(DownloadTopComponent.class.getName()).warning("Could not create the new dataset because the folder could not be created");
            }
        }
    }
}
