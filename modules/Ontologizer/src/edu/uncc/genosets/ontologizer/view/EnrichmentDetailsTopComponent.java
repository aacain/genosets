/*
 * 
 * 
 */
package edu.uncc.genosets.ontologizer.view;

import edu.uncc.genosets.datamanager.api.DataManager;
import edu.uncc.genosets.ontologizer.GoEnrichment;
import edu.uncc.genosets.studyset.StudySet;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Collection;
import java.util.List;
import javax.swing.Action;
import javax.swing.ActionMap;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.OutlineView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.*;
import org.openide.util.Lookup.Result;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.Lookups;
import org.openide.util.lookup.ProxyLookup;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays the enrichment detail.
 *
 */
@ConvertAsProperties(dtd = "-//edu.uncc.genosets.studyview//StudyView//EN",
        autostore = false)
@TopComponent.Description(preferredID = "EnrichmentDetailsTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
//@ActionID(category = "Window", id = "edu.uncc.genosets.ontologizer.view.EnrichmentDetailsTopComponent")
//@ActionReferences(value = {
//    @ActionReference(path = "Menu/Window"),
//    @ActionReference(path = "StudySet/Nodes/Actions", position = 100),
//    @ActionReference(path = "GoEnrichment/Nodes/Actions", position = 100)
//})
@TopComponent.OpenActionRegistration(displayName = "#CTL_EnrichmentDetailsAction",
        preferredID = "EnrichmentDetailsTopComponent")
@NbBundle.Messages({
    "CTL_EnrichmentDetailsAction=Go Enrichment Details",
    "CTL_EnrichmentDetailsTopComponent=Go Enrichment",
    "HINT_EnrichmentDetailsTopComponent=Displays the GO Enrichments"
})
public final class EnrichmentDetailsTopComponent extends TopComponent implements ExplorerManager.Provider {

    private ExplorerManager em;
    private Lookup.Result<GoEnrichment> enrichmentResult;
    private LookupListener enrichmentLookupListener;
    private Result<StudySet> studySetResult;
    private LookupListener studySetListener;
    private GoEnrichment current = null;
    private PropertyChangeListener dbChangeListener;
    private final InstanceContent ic;

    public EnrichmentDetailsTopComponent() {
        GoEnrichment enrich = Lookup.getDefault().lookup(GoEnrichment.class);
        setName(Bundle.CTL_EnrichmentDetailsTopComponent());
        setToolTipText(Bundle.HINT_EnrichmentDetailsTopComponent());
        initComponents();

        setVisibleProperties();
        this.em = new ExplorerManager();
        ActionMap map = this.getActionMap();
        this.ic = new InstanceContent();
        Lookup lookup = new ProxyLookup(new AbstractLookup(ic), ExplorerUtils.createLookup(this.em, map));
        this.associateLookup(lookup);
        List<? extends Action> actions = Utilities.actionsForPath("Toolbars2/GoEnrichment/");
        for (Action action : actions) {
            jToolBar1.add(action);
        }
    }

    private void setVisibleProperties() {
        String[] props = new String[]{
            TermCalculationChildFactory.PROP_GO_NAME, "GO Name",
            TermCalculationChildFactory.PROP_PVALUE_ADJUSTED, "P-value Adjusted",
            TermCalculationChildFactory.PROP_RATIO, "Ratio",
            TermCalculationChildFactory.PROP_STUDY_TERM, "Study Term Total",
            TermCalculationChildFactory.PROP_POP_TERM, "Population Term Total",
            TermCalculationChildFactory.PROP_STUDY_TOTAL, "Study Total",
            TermCalculationChildFactory.PROP_POP_TOTAL, "Population Total"
        };
        getOutlineView().setPropertyColumns(props);
    }

    private OutlineView getOutlineView() {
        return (OutlineView) mainScrollPane;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainScrollPane = new OutlineView();
        jToolBar1 = new javax.swing.JToolBar();
        Download = new javax.swing.JButton();

        jToolBar1.setRollover(true);

        org.openide.awt.Mnemonics.setLocalizedText(Download, org.openide.util.NbBundle.getMessage(EnrichmentDetailsTopComponent.class, "EnrichmentDetailsTopComponent.Download.text")); // NOI18N
        Download.setFocusable(false);
        Download.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Download.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Download.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DownloadActionPerformed(evt);
            }
        });
        jToolBar1.add(Download);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(mainScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void DownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DownloadActionPerformed
}//GEN-LAST:event_DownloadActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Download;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JScrollPane mainScrollPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        this.enrichmentResult = Utilities.actionsGlobalContext().lookupResult(GoEnrichment.class);
        this.enrichmentLookupListener = new LookupListener() {
            @Override
            public void resultChanged(LookupEvent ev) {
                enrichmentResultChanged(ev);
            }
        };
        this.enrichmentResult.addLookupListener(this.enrichmentLookupListener);
        enrichmentResultChanged(null);

        this.studySetResult = Utilities.actionsGlobalContext().lookupResult(StudySet.class);
        this.studySetListener = new LookupListener() {
            @Override
            public void resultChanged(LookupEvent ev) {
                studysetResultChanged(ev);
            }
        };
        this.studySetResult.addLookupListener(this.studySetListener);
        studysetResultChanged(null);
        dbChangeListener = new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                dbChanged(evt);
            }
        };
        DataManager.getDefault().addPropertyChangeListener(WeakListeners.create(PropertyChangeListener.class, dbChangeListener, DataManager.getDefault()));
    }

    @Override
    public void componentClosed() {
        this.enrichmentResult.removeLookupListener(this.enrichmentLookupListener);
        this.enrichmentResult = null;
        this.enrichmentLookupListener = null;
        this.current = null;
        this.studySetResult.removeLookupListener(this.studySetListener);
        this.studySetListener = null;
        this.studySetResult = null;
        //this.obo = null;
        DataManager.getDefault().removePropertyChangeListener(dbChangeListener);
        dbChangeListener = null;
        this.em.setRootContext(Node.EMPTY);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return this.em;
    }

    public void enrichmentResultChanged(LookupEvent ev) {
        if (this.enrichmentResult == null) {
            return;
        }
        Collection<? extends GoEnrichment> results = this.enrichmentResult.allInstances();
        if (results.size() != 1) {
            return;
        }
        GoEnrichment go = null;
        for (GoEnrichment goEnrichment : results) {
            go = goEnrichment;
            break;
        }
        //The results have changed.
        if (current == null || !go.equals(current)) {
            current = go;
            this.setDisplayName(current.getUniqueName());
            Node node = new AbstractNode(Children.create(new TermCalculationChildFactory(go), true), Lookups.singleton(go));
            node.setDisplayName("All");
            em.setRootContext(node);
        }
    }

    private void studysetResultChanged(LookupEvent ev) {
        if (studySetResult == null || studySetResult.allInstances().size() != 1) {
            return;
        }
        StudySet studySet = null;
        for (StudySet s : studySetResult.allInstances()) {
            studySet = s;
            break;
        }
        GoEnrichment go = studySet.getLookup().lookup(GoEnrichment.class);
        if (go == null) {
            current = go;
            this.setDisplayName(Bundle.CTL_EnrichmentDetailsTopComponent());
            Node node = new AbstractNode(Children.create(new TermCalculationChildFactory(null), true));
            node.setDisplayName("All");
            em.setRootContext(node);
        }
    }

    private void dbChanged(PropertyChangeEvent evt) {
        final TopComponent tc = this;
        if (DataManager.PROP_DB_CHANGED.equals(evt.getPropertyName())) {
            WindowManager.getDefault().invokeWhenUIReady(new Runnable() {
                @Override
                public void run() {
                    tc.close();
                }
            });
        }
    }
}
