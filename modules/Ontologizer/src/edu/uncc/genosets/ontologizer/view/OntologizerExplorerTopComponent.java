/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.uncc.genosets.ontologizer.view;

import edu.uncc.genosets.datamanager.api.DataManager;
import edu.uncc.genosets.ontologizer.GoEnrichment;
import edu.uncc.genosets.studyset.StudySet;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyVetoException;
import java.util.Set;
import javax.swing.ActionMap;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.*;
import org.openide.util.Lookup.Result;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.ProxyLookup;
import org.openide.windows.Mode;
import org.openide.windows.TopComponentGroup;
import org.openide.windows.WindowManager;

/**
 * Top component which displays the GO enrichments for the selected study set.
 */
@ConvertAsProperties(dtd = "-//edu.uncc.genosets.ontologizer.view//OntologizerExplorer//EN",
autostore = false)
@TopComponent.Description(preferredID = "OntologizerExplorerTopComponent",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "navigatorMiddle", openAtStartup = false)
@ActionID(category = "Window", id = "edu.uncc.genosets.ontologizer.view.OntologizerExplorerTopComponent")
@ActionReference(path = "Menu/Window", position = 310)
@TopComponent.OpenActionRegistration(displayName = "#CTL_OntologizerExplorerTopComponent",
preferredID = "OntologizerExplorerTopComponent")
@NbBundle.Messages({
    "CTL_OntologizerExplorerTopComponent=Ontologizer Explorer",
    "HINT_OntologizerExplorerTopComponent=This is the Ontologizer"
})
public final class OntologizerExplorerTopComponent extends TopComponent implements ExplorerManager.Provider, LookupListener {

    private ExplorerManager em;
    private Result<StudySet> studySetResult;
    private Result<GoEnrichment> goEnrichmentResult;
    private LookupListener enrichmentLookupListener;
    private StudySet current = null;
    private GoEnrichmentNodeFactory factory;
    private PropertyChangeListener dbChangeListener;

    public OntologizerExplorerTopComponent() {
        this.em = new ExplorerManager();
        ActionMap map = this.getActionMap();
        map.put("delete", ExplorerUtils.actionDelete(em, true));
        InstanceContent ic = new InstanceContent();
        ic.add(this);
        this.associateLookup(new ProxyLookup(new AbstractLookup(ic), ExplorerUtils.createLookup(this.em, map)));
        initComponents();
        setName(NbBundle.getMessage(OntologizerExplorerTopComponent.class, "CTL_OntologizerExplorerTopComponent"));
        setToolTipText(NbBundle.getMessage(OntologizerExplorerTopComponent.class, "HINT_OntologizerExplorerTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        putClientProperty(TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE);
        this.studySetResult = Utilities.actionsGlobalContext().lookupResult(StudySet.class);
        resultChanged(null);
        dbChangeListener = new PropertyChangeListener() {

            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                dbChanged(evt);
            }
        };
        DataManager.getDefault().addPropertyChangeListener(WeakListeners.create(PropertyChangeListener.class, dbChangeListener, DataManager.getDefault()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        beanTreeView = new BeanTreeView();

        setBackground(java.awt.Color.white);

        ((BeanTreeView)beanTreeView).setRootVisible(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(beanTreeView, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(beanTreeView, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane beanTreeView;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        this.studySetResult = Utilities.actionsGlobalContext().lookupResult(StudySet.class);
        this.studySetResult.addLookupListener(WeakListeners.create(LookupListener.class, this, this.studySetResult));
        ActionMap map = this.getActionMap();
        this.goEnrichmentResult = Utilities.actionsGlobalContext().lookupResult(GoEnrichment.class);
        this.enrichmentLookupListener = new LookupListener() {

            @Override
            public void resultChanged(LookupEvent ev) {
                updateSelection();
            }
        };
        this.goEnrichmentResult.addLookupListener(WeakListeners.create(LookupListener.class, this.enrichmentLookupListener, this.goEnrichmentResult));
    }

    private void updateSelection() {
        if (factory != null) {
            for (GoEnrichment goEnrichment : this.goEnrichmentResult.allInstances()) {
                Node findChild = factory.findChild(goEnrichment.getUniqueName());
                if (findChild != null) {
                    try {
                        Node[] selectedNodes = this.em.getSelectedNodes();
                        boolean needsUpdate = false;
                        if (selectedNodes.length == 1) {
                            for (Node node : selectedNodes) {
                                if (node != findChild) {
                                    needsUpdate = true;
                                }
                            }
                        } else {
                            needsUpdate = true;
                        }
                        if (needsUpdate) {
                            this.em.setSelectedNodes(new Node[]{findChild});
                        }
                    } catch (PropertyVetoException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                }
            }
        }
    }

    @Override
    protected void componentActivated() {
        super.componentActivated();
        //open properties group
        TopComponentGroup props = WindowManager.getDefault().findTopComponentGroup("OntologizerGroup");
        if (props != null) {
            props.open();
        }
//        Mode bottom = WindowManager.getDefault().findMode("leftBottom");
//        if(bottom != null){
//            TopComponent properties = WindowManager.getDefault().findTopComponent("properties");
//            if(properties != null){
//                properties.open();
//                properties.requestActive();
//            }
//        }
    }

    @Override
    public void componentClosed() {
        this.studySetResult.removeLookupListener(this);
        this.studySetResult = null;
        current = null;
        //close the properties group
        TopComponentGroup props = WindowManager.getDefault().findTopComponentGroup("OntologizerGroup");
        if (props != null) {
            props.close();
        }
    }

    @Override
    public HelpCtx getHelpCtx() {
        return new HelpCtx("edu.uncc.genosets.ontologizer.run");
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return this.em;
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        StudySet old = current;
        if (studySetResult == null) {
            this.current = null;
            return;
        }
        if (studySetResult.allInstances().size() > 1) {
            current = null;
        } else {
            for (StudySet studySet : studySetResult.allInstances()) {
                current = studySet;
            }
            if (current == null) {
                //then set current to old and don't do anything
                this.current = old;
            } else {
                if (current != old) {
                    //update the nodes
                    factory = new GoEnrichmentNodeFactory(current);
                    AbstractNode root = new AbstractNode(factory);
                    this.em.setRootContext(root);
                }
            }
        }
    }

    private void dbChanged(PropertyChangeEvent evt) {
        if (DataManager.PROP_DB_CHANGED.equals(evt.getPropertyName())) {
            current = null;
            //update the nodes
            factory = null;
            AbstractNode root = new AbstractNode(Children.LEAF);
            this.em.setRootContext(root);
        }
    }
}
