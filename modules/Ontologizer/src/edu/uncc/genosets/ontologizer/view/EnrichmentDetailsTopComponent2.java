/*
 * 
 * 
 */
package edu.uncc.genosets.ontologizer.view;

import edu.uncc.genosets.ontologizer.GoEnrichment;
import edu.uncc.genosets.ontologizer.actions.DownloadEnrichment;
import java.util.HashMap;
import java.util.List;
import javax.swing.Action;
import javax.swing.ActionMap;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.OutlineView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.*;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.Lookups;
import org.openide.util.lookup.ProxyLookup;
import org.openide.windows.TopComponent;

/**
 * Top component which displays the enrichment detail.
 *
 */
@NbBundle.Messages({
    "CTL_EnrichmentDetailsAction2=Go Enrichment Details",
    "CTL_EnrichmentDetailsTopComponent2=Go Enrichment",
    "HINT_EnrichmentDetailsTopComponent2=Displays the GO Enrichments"
})
public final class EnrichmentDetailsTopComponent2 extends TopComponent implements ExplorerManager.Provider {

    private GoEnrichment enrichment;
    private ExplorerManager em;
    private final InstanceContent ic;
    private static HashMap<GoEnrichment, EnrichmentDetailsTopComponent2> instances = new HashMap<GoEnrichment, EnrichmentDetailsTopComponent2>();

    public EnrichmentDetailsTopComponent2(GoEnrichment enrichment) {
        this.enrichment = enrichment;
        setName(Bundle.CTL_EnrichmentDetailsTopComponent2());
        setToolTipText(Bundle.HINT_EnrichmentDetailsTopComponent2());
        initComponents();
        setVisibleProperties();
        this.em = new ExplorerManager();
        ActionMap map = this.getActionMap();
        this.ic = new InstanceContent();
        Lookup lookup = new ProxyLookup(new AbstractLookup(ic), ExplorerUtils.createLookup(this.em, map));
        this.associateLookup(lookup);
//        List<? extends Action> actions = Utilities.actionsForPath("Toolbars2/GoEnrichment/");
//        for (Action action : actions) {
//            jToolBar1.add(action);
//        }
        this.ic.add(enrichment);
        this.setDisplayName(enrichment.getUniqueName());
        Node node = new AbstractNode(Children.create(new TermCalculationChildFactory(enrichment), true), Lookups.singleton(enrichment));
        node.setDisplayName("All");
        em.setRootContext(node);
    }

    private void setVisibleProperties() {
        String[] props = new String[]{
            TermCalculationChildFactory.PROP_GO_NAME, "GO Name",
            TermCalculationChildFactory.PROP_PVALUE_ADJUSTED, "P-value Adjusted",
            TermCalculationChildFactory.PROP_RATIO, "Ratio",
            TermCalculationChildFactory.PROP_STUDY_TERM, "Study Term Total",
            TermCalculationChildFactory.PROP_POP_TERM, "Population Term Total",
            TermCalculationChildFactory.PROP_STUDY_TOTAL, "Study Total",
            TermCalculationChildFactory.PROP_POP_TOTAL, "Population Total"
        };
        getOutlineView().setPropertyColumns(props);
    }

    private OutlineView getOutlineView() {
        return (OutlineView) mainScrollPane;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainScrollPane = new OutlineView();
        jToolBar1 = new javax.swing.JToolBar();
        downloadButton = new javax.swing.JButton();

        jToolBar1.setRollover(true);

        downloadButton.setAction(new DownloadEnrichment(enrichment));
        org.openide.awt.Mnemonics.setLocalizedText(downloadButton, org.openide.util.NbBundle.getMessage(EnrichmentDetailsTopComponent2.class, "EnrichmentDetailsTopComponent2.downloadButton.text_1")); // NOI18N
        downloadButton.setFocusable(false);
        downloadButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        downloadButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(downloadButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(mainScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton downloadButton;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JScrollPane mainScrollPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
        instances.remove(enrichment);
    }
    
    public static EnrichmentDetailsTopComponent2 findInstance(GoEnrichment go){
        EnrichmentDetailsTopComponent2 tc = instances.get(go);
        if(tc == null){
            tc = new EnrichmentDetailsTopComponent2(go);
            instances.put(go, tc);
        }
        return tc;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return this.em;
    }

    @Override
    public int getPersistenceType() {
        return PERSISTENCE_NEVER;
    }
}
