/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.uncc.genosets.fasta.load;

import edu.uncc.genosets.datamanager.api.DataManager;
import edu.uncc.genosets.datamanager.entity.Organism;
import edu.uncc.genosets.datamanager.persister.OrganismPersister;
import edu.uncc.genosets.fasta.load.OrganismChildFactory.OrganismNode;
import java.awt.Dialog;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyVetoException;
import java.io.File;
import java.util.Collections;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.ChoiceView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.WeakListeners;

public final class FastaNucVisualPanel1 extends JPanel implements ExplorerManager.Provider, PropertyChangeListener{

    private ExplorerManager em;
    private File file;

    /** Creates new form GffWizardVisualPanel1 */
    public FastaNucVisualPanel1() {
        em = new ExplorerManager();
        updateOrganisms(null);
        em.addPropertyChangeListener(WeakListeners.propertyChange(this, em)); 

        initComponents();
    }

    
    private void propertyChanged(){
        firePropertyChange("PROP_xfjdsfjie", null, null);
    }

    private void updateOrganisms(Organism org) {
        Children children = Children.create(new OrganismChildFactory(), false);
        AbstractNode root = new AbstractNode(children);
        OrganismNode orgNode = null;
        if (org != null) {
            for (Node node : children.getNodes()) {
                if (node instanceof OrganismNode) {
                    OrganismNode orgNodeTemp = (OrganismNode) node;
                    if (orgNodeTemp.getOrganism().equals(org)) {
                        orgNode = orgNodeTemp;
                    }
                }
            }
        }
        this.em.setRootContext(root);
        if (orgNode != null) {
            try {
                this.em.setExploredContextAndSelection(root, new Node[]{orgNode});
                this.organismComboBox.setSelectedItem(orgNode);
            } catch (PropertyVetoException ex) {
            }
        }
        propertyChanged();
    }

    public Organism getOrganism() {
        for (Node node : em.getSelectedNodes()) {
            if (node instanceof OrganismNode) {
                return ((OrganismNode) node).getOrganism();
            }
        }
        return null;
    }

    public File getFile() {
        return this.file;
    }

    @Override
    public String getName() {
        return "Select File & Organism:";
    }


    private Organism createOrganism(NewOrganismPanel orgPanel) {
        Organism org = new Organism();
        org.setKingdom(orgPanel.getKingdom());
        org.setPhylum(orgPanel.getPhlum());
        org.setTaxClass(orgPanel.getTaxClass());
        org.setTaxOrder(orgPanel.getOrder());
        org.setFamily(orgPanel.getFamily());
        org.setGenus(orgPanel.getFamily());
        org.setSpecies(orgPanel.getSpecies());
        org.setStrain(orgPanel.getStrain());
        org.setSample(orgPanel.getSample());
        org.setShortName(orgPanel.getShortName());
        org.setProjectId(orgPanel.getProject());
        return org;
    }

    @Override
    public void addNotify() {
        super.addNotify();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        gffFileTextField = new javax.swing.JTextField();
        fileButton = new javax.swing.JButton();
        organismComboBox = new ChoiceView();
        jLabel2 = new javax.swing.JLabel();
        newButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(FastaNucVisualPanel1.class, "FastaNucVisualPanel1.jLabel1.text_1")); // NOI18N

        gffFileTextField.setEditable(false);
        gffFileTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        gffFileTextField.setText(org.openide.util.NbBundle.getMessage(FastaNucVisualPanel1.class, "FastaNucVisualPanel1.gffFileTextField.text_1")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(fileButton, org.openide.util.NbBundle.getMessage(FastaNucVisualPanel1.class, "FastaNucVisualPanel1.fileButton.text_1")); // NOI18N
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(FastaNucVisualPanel1.class, "FastaNucVisualPanel1.jLabel2.text_1")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(newButton, org.openide.util.NbBundle.getMessage(FastaNucVisualPanel1.class, "FastaNucVisualPanel1.newButton.text")); // NOI18N
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(organismComboBox, 0, 318, Short.MAX_VALUE)
                    .addComponent(gffFileTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(newButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(gffFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(organismComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(newButton))
                .addContainerGap(147, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed
    JFileChooser chooser = new JFileChooser();
    chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
    chooser.setMultiSelectionEnabled(false);
    int returnVal = chooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        file = chooser.getSelectedFile();
        gffFileTextField.setText(file.getAbsolutePath());
        propertyChanged();
    }
}//GEN-LAST:event_fileButtonActionPerformed

private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
    NewOrganismPanel orgPanel = new NewOrganismPanel();
    DialogDescriptor descriptor = new DialogDescriptor(new JScrollPane(orgPanel), "Create a new organism", true, DialogDescriptor.OK_CANCEL_OPTION, DialogDescriptor.OK_OPTION, null);
    Dialog dialog = DialogDisplayer.getDefault().createDialog(descriptor);
    dialog.setVisible(true);
    dialog.toFront();
    boolean cancelled = descriptor.getValue() != DialogDescriptor.OK_OPTION;
    if (!cancelled) {
        //add organism
        OrganismPersister persister = OrganismPersister.instantiate();
        Organism org = createOrganism(orgPanel);
        persister.setup(org);
        DataManager mgr = DataManager.getDefault();
        mgr.persist(Collections.singletonList(persister));
        updateOrganisms(org);
    }
}//GEN-LAST:event_newButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton fileButton;
    private javax.swing.JTextField gffFileTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton newButton;
    private javax.swing.JComboBox organismComboBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public ExplorerManager getExplorerManager() {
        return this.em;
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        propertyChanged();
    }
}
