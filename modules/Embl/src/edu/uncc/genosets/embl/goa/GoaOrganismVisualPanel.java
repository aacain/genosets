/*
 * Copyright (C) 2014 Aurora Cain
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package edu.uncc.genosets.embl.goa;

import edu.uncc.genosets.datamanager.api.DataManager;
import edu.uncc.genosets.datamanager.api.QueryCreator;
import edu.uncc.genosets.datamanager.entity.Organism;
import edu.uncc.genosets.datanavigator.OrganismNode;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.reflect.InvocationTargetException;
import java.sql.Ref;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import org.openide.actions.DeleteAction;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.ActionRegistration;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.CheckableNode;
import org.openide.explorer.view.OutlineView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.ChildFactory;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.nodes.PropertySupport;
import org.openide.nodes.Sheet;
import org.openide.util.ContextAwareAction;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.util.Utilities;

/**
 *
 * @author lucy
 */
public class GoaOrganismVisualPanel extends javax.swing.JPanel implements ExplorerManager.Provider, Lookup.Provider {

    private ExplorerManager em;
    private Lookup lookup;

    /**
     * Creates new form GoaOrganismVisualPanel
     */
    public GoaOrganismVisualPanel() {
        this.em = new ExplorerManager();
        AbstractNode root = new AbstractNode(Children.create(new OrgChildFactory(), true));
        this.em.setRootContext(root);
        initComponents();
        OutlineView view = (OutlineView) explorerView;
        view.getOutline().setRootVisible(Boolean.FALSE);
        view.addPropertyColumn("lastRun", "Last Run");
        ActionMap map = getActionMap();
        DeleteAction delete = DeleteAction.get(DeleteAction.class);
        map.put(delete.getActionMapKey(), delete);
        lookup = ExplorerUtils.createLookup(em, map);
    }

    @Override
    public String getName() {
        return "Select Organisms";
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return this.em;
    }

    @Override
    public Lookup getLookup() {
        return this.lookup;
    }

    @Override
    public void addNotify() {
        super.addNotify();
        ExplorerUtils.activateActions(em, true);
    }

    @Override
    public void removeNotify() {
        ExplorerUtils.activateActions(em, false);
        super.removeNotify();
    }
    
    public Set<Organism> getCheckedNodes() {
        Set<Organism> orgSet = new HashSet<Organism>();
        Children children = getExplorerManager().getRootContext().getChildren();
        for (Node node : children.getNodes()) {
            if (node instanceof CheckableNode) {
                CheckableNode checkable = (CheckableNode) node;
                if (checkable.isSelected()) {
                    Organism org = node.getLookup().lookup(Organism.class);
                    if (org != null) {
                        orgSet.add(org);
                    }
                }
            }
        }
        return orgSet;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        explorerView = new OutlineView();
        jLabel1 = new javax.swing.JLabel();
        selectAllButton = new javax.swing.JButton();
        deselectAllButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(GoaOrganismVisualPanel.class, "GoaOrganismVisualPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(selectAllButton, org.openide.util.NbBundle.getMessage(GoaOrganismVisualPanel.class, "GoaOrganismVisualPanel.selectAllButton.text")); // NOI18N
        selectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(deselectAllButton, org.openide.util.NbBundle.getMessage(GoaOrganismVisualPanel.class, "GoaOrganismVisualPanel.deselectAllButton.text")); // NOI18N
        deselectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deselectAllButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(explorerView)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(selectAllButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deselectAllButton)))
                        .addGap(0, 212, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(explorerView, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectAllButton)
                    .addComponent(deselectAllButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void selectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllButtonActionPerformed
        for (Node node : getExplorerManager().getRootContext().getChildren().getNodes()) {
            CheckableNode checkable = (CheckableNode) node;
            checkable.setSelected(Boolean.TRUE);
        }
    }//GEN-LAST:event_selectAllButtonActionPerformed

    private void deselectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deselectAllButtonActionPerformed
        for (Node node : getExplorerManager().getRootContext().getChildren().getNodes()) {
            CheckableNode checkable = (CheckableNode) node;
            checkable.setSelected(Boolean.FALSE);
        }
    }//GEN-LAST:event_deselectAllButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deselectAllButton;
    private javax.swing.JScrollPane explorerView;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton selectAllButton;
    // End of variables declaration//GEN-END:variables

    public static class OrgChildFactory extends ChildFactory<Organism> {

        @Override
        protected boolean createKeys(List<Organism> toPopulate) {
            toPopulate.addAll(DataManager.getDefault().getOrganisms());
            return true;
        }

        @Override
        protected Node createNodeForKey(Organism key) {
            return new MyOrgNode(key);
        }
    }

    public static class MyOrgNode extends OrganismNode implements CheckableNode {

        private boolean selected;
        private List<Action> actions = null;

        public MyOrgNode(Organism org) {
            super(org, Children.LEAF);
        }

        @Override
        public boolean isCheckable() {
            return true;
        }

        @Override
        public boolean isCheckEnabled() {
            return true;
        }

        @Override
        public Boolean isSelected() {
            return this.selected;
        }

        @Override
        public void setSelected(Boolean isSelected) {
            boolean old = this.selected;
            this.selected = isSelected;
            this.firePropertyChange("SELECT", old, isSelected);
            
        }

        @Override
        public Action[] getActions(boolean context) {
            if (actions == null) {
                actions = new ArrayList<Action>();
                actions.addAll(Utilities.actionsForPath("Nodes/ContextActions/GoaOrganismVisualPanel"));
            }
            return actions.toArray(new Action[actions.size()]);
        }

        @Override
        protected Sheet createSheet() {
            Sheet sheet = super.createSheet();
            Sheet.Set setProps = Sheet.createPropertiesSet();
            setProps.setDisplayName("Additional Properties");
            sheet.put(setProps);

            Property<Date> lastRun = new PropertySupport.ReadOnly<Date>("lastRun", Date.class, "Last Run", "Date") {
                @Override
                public Date getValue() throws IllegalAccessException, InvocationTargetException {
                    Organism org = getLookup().lookup(Organism.class);
                    return LastRunQuery.getLastGORunDate(org);
                }
            };
            setProps.put(lastRun);
            return sheet;
        }

        @ActionID(
                category = "Actions",
                id = "edu.uncc.genosets.embl.goa.GoaOrganismVisualPanel.CheckAction")
        @ActionRegistration(
                displayName = "#CTL_CheckAction")
        @NbBundle.Messages("CTL_CheckAction=Select")
        @ActionReference(path = "Nodes/ContextActions/GoaOrganismVisualPanel", position = 1200)
        public final static class CheckAction implements ActionListener {

            private final List<CheckableNode> context;

            public CheckAction(List<CheckableNode> context) {
                this.context = context;
            }

            @Override
            public void actionPerformed(ActionEvent ev) {
                for (CheckableNode checkable : context) {
                    checkable.setSelected(Boolean.TRUE);
                }
            }
        }

        @ActionID(
                category = "Actions",
                id = "edu.uncc.genosets.embl.goa.GoaOrganismVisualPanel.UncheckAction")
        @ActionRegistration(
                displayName = "#CTL_UncheckAction")
        @NbBundle.Messages("CTL_UncheckAction=Deselect")
        @ActionReference(path = "Nodes/ContextActions/GoaOrganismVisualPanel", position = 1200)
        public final static class UncheckAction implements ActionListener {

            private final List<CheckableNode> context;

            public UncheckAction(List<CheckableNode> context) {
                this.context = context;
            }

            @Override
            public void actionPerformed(ActionEvent ev) {
                for (CheckableNode checkable : context) {
                    checkable.setSelected(Boolean.FALSE);
                }
            }
        }
    }

    private static class LastRunQuery implements QueryCreator {

        static Date getLastGORunDate(Organism org) {

            StringBuilder bldr = new StringBuilder("SELECT max(m.loadDate)");
            bldr.append(" FROM AnnotationMethod as m, Fact_Feature_GoAnno as g ");
            bldr.append(" WHERE ");
            bldr.append(" g.organismId = ").append(org.getOrganismId());
            bldr.append(" AND ");
            bldr.append(" m.annotationMethodId = g.annotationMethodId ");
            List createQuery = DataManager.getDefault().createQuery(bldr.toString());
            for (Object obj : createQuery) {
                if (obj instanceof Date) {
                    return (Date) obj;
                }
            }
            return null;
        }
    }
}
