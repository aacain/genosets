/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.uncc.genosets.featuregodetail.view;

import edu.uncc.genosets.datamanager.api.DataManager;
import edu.uncc.genosets.datamanager.entity.Feature;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Collection;
import java.util.LinkedList;
import org.openide.util.LookupEvent;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.util.*;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//edu.uncc.genosets.featuregodetail.view//FeatureGoDetail//EN",
autostore = false)
@TopComponent.Description(preferredID = "FeatureGoDetailTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "properties", openAtStartup = false)
//@ActionID(category = "Window", id = "edu.uncc.genosets.featuregodetail.view.FeatureGoDetailTopComponent")
//@ActionReference(path = "Menu/Window", position = 260 )
@TopComponent.OpenActionRegistration(displayName = "#CTL_FeatureGoDetailAction",
preferredID = "FeatureGoDetailTopComponent")
public final class FeatureGoDetailTopComponent extends TopComponent implements ExplorerManager.Provider {

    private Lookup.Result<Feature> featureResult;
    private LookupListener featurePcListener;
    private ExplorerManager em;
    private PropertyChangeListener dbChangeListener;

    public FeatureGoDetailTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(FeatureGoDetailTopComponent.class, "CTL_FeatureGoDetailTopComponent"));
        setToolTipText(NbBundle.getMessage(FeatureGoDetailTopComponent.class, "HINT_FeatureGoDetailTopComponent"));
        dbChangeListener = new PropertyChangeListener() {

            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                dbChanged(evt);
            }
        };
        DataManager.getDefault().addPropertyChangeListener(WeakListeners.create(PropertyChangeListener.class, dbChangeListener, DataManager.getDefault()));
    }
    
    private void dbChanged(PropertyChangeEvent evt) {
        final TopComponent tc = this;
        if (DataManager.PROP_DB_CHANGED.equals(evt.getPropertyName())) {
            WindowManager.getDefault().invokeWhenUIReady(new Runnable() {

                @Override
                public void run() {
                    tc.close();
                }

            });
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainScrollPanel = new BeanTreeView();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane mainScrollPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        this.em = new ExplorerManager();
        featureResult = Utilities.actionsGlobalContext().lookupResult(Feature.class);
        featurePcListener = new LookupListener() {

            @Override
            public void resultChanged(LookupEvent le) {
                featureChanged(le);
            }
        };
        featureResult.addLookupListener(featurePcListener);
    }

    @Override
    public void componentClosed() {
        this.featureResult.removeLookupListener(featurePcListener);
        this.featurePcListener = null;
        this.featureResult = null;
        this.em = null;
    }

    private void featureChanged(LookupEvent evt) {
        if (this.featureResult != null) {
            if (!featureResult.allInstances().isEmpty()) {
                Collection<? extends Feature> collection = new LinkedList(featureResult.allInstances());
                Children children = Children.create(new AllFeatureNodeFactory(collection), true);
                AbstractNode root = new AbstractNode(children);
                this.em.setRootContext(root);
            }
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return this.em;
    }
}
