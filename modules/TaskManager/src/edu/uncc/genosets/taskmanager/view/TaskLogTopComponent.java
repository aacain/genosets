/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.uncc.genosets.taskmanager.view;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.ActionMap;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.OutlineView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//edu.uncc.genosets.taskmanager.view//TaskLog//EN",
autostore = false)
@TopComponent.Description(preferredID = "TaskLogTopComponent",
iconBase="edu/uncc/genosets/taskmanager/resources/actionView.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "edu.uncc.genosets.taskmanager.view.TaskLogTopComponent")
@ActionReference(path = "Menu/Window", position = 810)
@TopComponent.OpenActionRegistration(displayName = "#CTL_TaskLogAction",
preferredID = "TaskLogTopComponent")
@Messages({
    "CTL_TaskLogAction=Task Log",
    "CTL_TaskLogTopComponent=Task Log",
    "HINT_TaskLogTopComponent=Task Log"
})
public final class TaskLogTopComponent extends TopComponent implements ExplorerManager.Provider, PropertyChangeListener {

    private ExplorerManager em = new ExplorerManager();

    public TaskLogTopComponent() {
        initComponents();
        setName(Bundle.CTL_TaskLogTopComponent());
        setToolTipText(Bundle.HINT_TaskLogTopComponent());

        ActionMap map = getActionMap();
        map.put("delete", ExplorerUtils.actionDelete(em, Boolean.FALSE));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new OutlineView("Messages");

        OutlineView view = (OutlineView)jScrollPane1;
        view.setPropertyColumns(MessageChildren.MessageNode.getProperties());
        view.getOutline().setRootVisible(Boolean.FALSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        AbstractNode root = new AbstractNode(new MessageChildren());
        this.em.setRootContext(root);
    }

    @Override
    public void componentClosed() {
        AbstractNode root = new AbstractNode(Children.LEAF);
        this.em.setRootContext(root);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return this.em;
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        final TopComponent tc = this;
        WindowManager.getDefault().invokeWhenUIReady(new Runnable() {
            @Override
            public void run() {
                tc.open();
            }
        });
    }
}
