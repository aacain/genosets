/*
 * 
 * 
 */
package edu.uncc.genosets.gotermclusterview;

import edu.uncc.genosets.datamanager.api.DataManager;
import edu.uncc.genosets.ontologizer.GoEnrichment;
import edu.uncc.genosets.studyset.GoTerm;
import edu.uncc.genosets.studyset.StudySet;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.ActionMap;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.ActionReferences;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.OutlineView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.util.Lookup.Result;
import org.openide.util.*;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//edu.uncc.genosets.gotermclusterview//GoDetail//EN",
autostore = false)
@TopComponent.Description(preferredID = "GoDetailTopComponent",
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "edu.uncc.genosets.gotermclusterview.GoDetailTopComponent")
@ActionReferences(value = {
    @ActionReference(path = "Menu/Window", position = 250),
    @ActionReference(path = "TermCalculation/Nodes/Actions", position = 1100)})
@TopComponent.OpenActionRegistration(displayName = "#CTL_GoDetailTopComponent",
preferredID = "GoDetailTopComponent")
@NbBundle.Messages({
    "CTL_GoDetailTopComponent=Orthologs by GO Term",
    "HINT_GoDetailTopComponent=Orthologs by GO Term"
})
public final class GoDetailTopComponent extends TopComponent implements ExplorerManager.Provider, LookupListener {

    private ExplorerManager em;
    private Result<StudySet> studySetResult;
    private Result<GoTerm> termResult;
    private GoTerm selectedTerm;
    private GoEnrichment selectedEnrichment;
    private Result<GoEnrichment> enrichmentResult;
    Lookup lookup;
    private PropertyChangeListener dbChangeListener;

    public GoDetailTopComponent() {
        this.em = new ExplorerManager();
        ActionMap map = this.getActionMap();
        this.lookup = ExplorerUtils.createLookup(this.em, map);
        this.associateLookup(lookup);
        
        initComponents();
        setName(Bundle.CTL_GoDetailTopComponent());
        setToolTipText(Bundle.HINT_GoDetailTopComponent());
        //        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        dbChangeListener = new PropertyChangeListener() {

            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                dbChanged(evt);
            }
        };
        DataManager.getDefault().addPropertyChangeListener(WeakListeners.create(PropertyChangeListener.class, dbChangeListener, DataManager.getDefault()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new OutlineView();
        jToolBar1 = new javax.swing.JToolBar();
        plusButton = new javax.swing.JButton();
        minusButton = new javax.swing.JButton();

        OutlineView view = (OutlineView)jScrollPane1;
        view.setPropertyColumns(GoTermNodeFactory.FeatureNode.getProperties());

        jToolBar1.setRollover(true);

        plusButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/uncc/genosets/gotermclusterview/addition.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(plusButton, org.openide.util.NbBundle.getMessage(GoDetailTopComponent.class, "GoDetailTopComponent.plusButton.text")); // NOI18N
        plusButton.setToolTipText(org.openide.util.NbBundle.getMessage(GoDetailTopComponent.class, "GoDetailTopComponent.plusButton.toolTipText")); // NOI18N
        plusButton.setFocusable(false);
        plusButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        plusButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        plusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(plusButton);

        minusButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/uncc/genosets/gotermclusterview/subtraction.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(minusButton, org.openide.util.NbBundle.getMessage(GoDetailTopComponent.class, "GoDetailTopComponent.minusButton.text")); // NOI18N
        minusButton.setToolTipText(org.openide.util.NbBundle.getMessage(GoDetailTopComponent.class, "GoDetailTopComponent.minusButton.toolTipText")); // NOI18N
        minusButton.setFocusable(false);
        minusButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        minusButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        minusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(minusButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void plusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusButtonActionPerformed
//        ((TreeTableView) jScrollPane1).expandAll();
    }//GEN-LAST:event_plusButtonActionPerformed

    private void minusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minusButtonActionPerformed
//        try {
//            em.setSelectedNodes(new Node[]{});
//            em.setExploredContext(em.getRootContext());
//            ((TreeTableView) jScrollPane1).collapseNode(em.getRootContext());
//        } catch (PropertyVetoException ex) {
//        }
    }//GEN-LAST:event_minusButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton minusButton;
    private javax.swing.JButton plusButton;
    // End of variables declaration//GEN-END:variables

//    private void collapse(Node node) {
//        for (Node child : node.getChildren().getNodes(true)) {
//            collapse(child);
//        }
//        ((TreeTableView) jScrollPane1).collapseNode(node);
//    }
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
        this.termResult = Utilities.actionsGlobalContext().lookupResult(GoTerm.class);
        this.termResult.addLookupListener(this);
        this.studySetResult = Utilities.actionsGlobalContext().lookupResult(StudySet.class);
        this.studySetResult.addLookupListener(this);
        this.enrichmentResult = Utilities.actionsGlobalContext().lookupResult(GoEnrichment.class);
        this.enrichmentResult.addLookupListener(this);

        resultChanged(null);
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
        this.termResult.removeLookupListener(this);
        this.termResult = null;
        this.studySetResult.removeLookupListener(this);
        this.studySetResult = null;
        this.selectedTerm = null;
        this.enrichmentResult.removeLookupListener(this);
        this.enrichmentResult = null;
        this.selectedEnrichment = null;
        AbstractNode root = new AbstractNode(Children.LEAF);
        root.setDisplayName("");
        this.em.setRootContext(root);
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return this.em;
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        GoEnrichment oldEnrichment = this.selectedEnrichment;
        if (this.enrichmentResult.allInstances().isEmpty()) {
            if (this.studySetResult.allInstances().size() == 1) {
                this.selectedEnrichment = null;
            }
        } else if (this.enrichmentResult.allInstances().size() != 1) {
            //set to empty
            this.selectedEnrichment = null;
        } else {
            for (GoEnrichment go : this.enrichmentResult.allInstances()) {
                this.selectedEnrichment = go;
            }
        }
        GoTerm oldTerm = selectedTerm;
        if (this.termResult.allInstances().size() == 1) {
            for (GoTerm goTerm : this.termResult.allInstances()) {
                this.selectedTerm = goTerm;
            }
        }
        if (selectedTerm == null || selectedEnrichment == null || selectedEnrichment.getTermCalculationMap() == null) {
            //set empty
            AbstractNode root = new AbstractNode(Children.create(new ClusterNodeFactory(null, null), true));
            root.setDisplayName("No Enrichment performed");
            this.em.setRootContext(root);
            return;
        }
        if (oldTerm != selectedTerm || oldEnrichment != selectedEnrichment) {
            Children children = Children.create(new ClusterNodeFactory(selectedTerm, selectedEnrichment.getTermCalculationMap().get(selectedTerm.getGoId())), true);
            children.getNodes();
            AbstractNode root = new AbstractNode(children);
            root.setDisplayName(selectedTerm.getGoId() + " " + GoTerm.getGOName(selectedTerm.getGoId(), null));
            this.em.setRootContext(root);
        }
    }

    private void dbChanged(PropertyChangeEvent evt) {
        final TopComponent tc = this;
        if (DataManager.PROP_DB_CHANGED.equals(evt.getPropertyName())) {
            WindowManager.getDefault().invokeWhenUIReady(new Runnable() {

                @Override
                public void run() {
                    tc.close();
                }
            });
        }
    }
}
